Line 1: type_specifier : INT 

Line 1: declaration_list : ID
x

Line 1: declaration_list : declaration_list COMMA ID
y

Line 1: declaration_list : declaration_list COMMA ID
z

Line 1: var_declaration	: type_specifier declaration_list SEMICOLON

Line 1: unit : var_declaration

Line 1: program : unit

Line 1: type_specifier : FLOAT

Line 1: declaration_list : ID
a

Line 1: var_declaration	: type_specifier declaration_list SEMICOLON

Line 1: unit : var_declaration

Line 1: program : program unit

Line 3: type_specifier : VOID

Line 3: func_declaration : type_specifier ID LPAREN RPAREN SEMICOLON
foo

Line 3: unit : func_declaration

Line 3: program : program unit

Line 5: type_specifier : INT 

Line 5: type_specifier : INT 

Line 5: parameter_list  : type_specifier ID
a

Line 5: type_specifier : INT 

Line 5: parameter_list  : parameter_list COMMA type_specifier ID
b

Line 6: variable : ID
a

Line 6: factor : variable

Line 6: unary_expression : factor

Line 6: term : unary_expression

Line 6: simple_expression : term

Line 6: variable : ID
b

Line 6: factor : variable

Line 6: unary_expression : factor

Line 6: term : unary_expression

Line 6: simple_expression : simple_expression ADDOP term

Line 6: rel_expression : simple_expression

Line 6: logic_expression : rel_expression

Line 6: expression : logic_expression

Line 6: statement : RETURN expression SEMICOLON 

Line 6: statements : statement

Line 7: compound_statement : LCURL statements RCURL

ScopeTable # 2
0 -->  < b, int , -10000000 >
5 -->  < a, int , -10000000 >

ScopeTable # 1
0 -->  < var, function >
1 -->  < y, int , -10000000 >
5 -->  < a, float , -10000000.000000 >
6 -->  < x, int , -10000000 > < z, int , -10000000 > < foo, function >

Line 7: func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement
var

Line 7: unit : func_definition

Line 7: program : program unit

Line 9: type_specifier : VOID

Line 10: variable : ID
x

Line 10: factor : CONST_INT
2

Line 10: unary_expression : factor

Line 10: term : unary_expression

Line 10: simple_expression : term

Line 10: rel_expression : simple_expression

Line 10: logic_expression : rel_expression

Line 10: expression : variable ASSINOP logic_expression

ScopeTable # 3

ScopeTable # 1
0 -->  < var, function >
1 -->  < y, int , -10000000 >
5 -->  < a, float , -10000000.000000 >
6 -->  < x, int , -10000000 > < z, int , -10000000 > < foo, function >

Line 10: expression_statement	: expression SEMICOLON

Line 10: statement : expression_statement

Line 10: statements : statement

Line 11: variable : ID
y

Line 11: variable : ID
x

Line 11: factor : variable

Line 11: unary_expression : factor

Line 11: term : unary_expression

Line 11: simple_expression : term

Line 11: factor : CONST_INT
5

Line 11: unary_expression : factor

Line 11: term : unary_expression

Line 11: simple_expression : simple_expression ADDOP term

Line 11: rel_expression : simple_expression

Line 11: logic_expression : rel_expression

Line 11: expression : variable ASSINOP logic_expression

ScopeTable # 3

ScopeTable # 1
0 -->  < var, function >
1 -->  < y, int , -10000000 >
5 -->  < a, float , -10000000.000000 >
6 -->  < x, int , -10000000 > < z, int , -10000000 > < foo, function >

Line 11: expression_statement	: expression SEMICOLON

Line 11: statement : expression_statement

Line 11: statements : statements statement

Line 12: compound_statement : LCURL statements RCURL

ScopeTable # 3

ScopeTable # 1
0 -->  < var, function >
1 -->  < y, int , -10000000 >
5 -->  < a, float , -10000000.000000 >
6 -->  < x, int , -10000000 > < z, int , -10000000 > < foo, function >

Line 12: func_definition : type_specifier ID LPAREN RPAREN compound_statement
foo

Line 12: unit : func_definition

Line 12: program : program unit

Line 14: type_specifier : INT 

Line 15: type_specifier : INT 

Line 15: declaration_list : ID LTHIRD CONST_INT RTHIRD
a
2

Line 15: declaration_list : declaration_list COMMA ID
c

Line 15: declaration_list : declaration_list COMMA ID
i

Line 15: declaration_list : declaration_list COMMA ID
j

Line 15: var_declaration	: type_specifier declaration_list SEMICOLON

Line 15: statement  : var_declaration

Line 15: statements : statement

Line 15: type_specifier : FLOAT

Line 15: declaration_list : ID
d

Line 15: var_declaration	: type_specifier declaration_list SEMICOLON

Line 15: statement  : var_declaration

Line 15: statements : statements statement

Line 16: factor : CONST_INT
0

Line 16: unary_expression : factor

Line 16: term : unary_expression

Line 16: simple_expression : term

Line 16: rel_expression : simple_expression

Line 16: logic_expression : rel_expression

Line 16: expression : logic_expression

Line 16: variable : ID LTHIRD expression RTHIRD
a

Line 16: factor : CONST_INT
1

Line 16: unary_expression : factor

Line 16: term : unary_expression

Line 16: simple_expression : term

Line 16: rel_expression : simple_expression

Line 16: logic_expression : rel_expression

Line 16: expression : variable ASSINOP logic_expression

ScopeTable # 4
0 -->  < i, int , -10000000 >
1 -->  < d, float , -10000000.000000 >
5 -->  < a, int ,{ -10000000, -10000000 }>
6 -->  < c, int , -10000000 > < j, int , -10000000 >

ScopeTable # 1
0 -->  < var, function >
1 -->  < y, int , -10000000 > < main, function >
5 -->  < a, float , -10000000.000000 >
6 -->  < x, int , -10000000 > < z, int , -10000000 > < foo, function >

Line 16: expression_statement	: expression SEMICOLON

Line 16: statement : expression_statement

Line 16: statements : statements statement

Line 17: factor : CONST_INT
1

Line 17: unary_expression : factor

Line 17: term : unary_expression

Line 17: simple_expression : term

Line 17: rel_expression : simple_expression

Line 17: logic_expression : rel_expression

Line 17: expression : logic_expression

Line 17: variable : ID LTHIRD expression RTHIRD
a

Line 17: factor : CONST_INT
5

Line 17: unary_expression : factor

Line 17: term : unary_expression

Line 17: simple_expression : term

Line 17: rel_expression : simple_expression

Line 17: logic_expression : rel_expression

Line 17: expression : variable ASSINOP logic_expression

ScopeTable # 4
0 -->  < i, int , -10000000 >
1 -->  < d, float , -10000000.000000 >
5 -->  < a, int ,{ -10000000, -10000000 }>
6 -->  < c, int , -10000000 > < j, int , -10000000 >

ScopeTable # 1
0 -->  < var, function >
1 -->  < y, int , -10000000 > < main, function >
5 -->  < a, float , -10000000.000000 >
6 -->  < x, int , -10000000 > < z, int , -10000000 > < foo, function >

Line 17: expression_statement	: expression SEMICOLON

Line 17: statement : expression_statement

Line 17: statements : statements statement

Line 18: variable : ID
i

Line 18: factor : CONST_INT
0

Line 18: unary_expression : factor

Line 18: term : unary_expression

Line 18: simple_expression : term

Line 18: rel_expression : simple_expression

Line 18: logic_expression : rel_expression

Line 18: expression : logic_expression

Line 18: variable : ID LTHIRD expression RTHIRD
a

Line 18: factor : variable

Line 18: unary_expression : factor

Line 18: term : unary_expression

Line 18: simple_expression : term

Line 18: factor : CONST_INT
1

Line 18: unary_expression : factor

Line 18: term : unary_expression

Line 18: simple_expression : term

Line 18: rel_expression : simple_expression

Line 18: logic_expression : rel_expression

Line 18: expression : logic_expression

Line 18: variable : ID LTHIRD expression RTHIRD
a

Line 18: factor : variable

Line 18: unary_expression : factor

Line 18: term : unary_expression

Line 18: simple_expression : simple_expression ADDOP term

Line 18: rel_expression : simple_expression

Line 18: logic_expression : rel_expression

Line 18: expression : variable ASSINOP logic_expression

ScopeTable # 4
0 -->  < i, int , -10000000 >
1 -->  < d, float , -10000000.000000 >
5 -->  < a, int ,{ -10000000, -10000000 }>
6 -->  < c, int , -10000000 > < j, int , -10000000 >

ScopeTable # 1
0 -->  < var, function >
1 -->  < y, int , -10000000 > < main, function >
5 -->  < a, float , -10000000.000000 >
6 -->  < x, int , -10000000 > < z, int , -10000000 > < foo, function >

Line 18: expression_statement	: expression SEMICOLON

Line 18: statement : expression_statement

Line 18: statements : statements statement

Line 19: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

Line 19: statements : statements statement

Line 20: variable : ID
j

Line 20: factor : CONST_INT
2

Line 20: unary_expression : factor

Line 20: term : unary_expression

Line 20: factor : CONST_INT
3

Line 20: unary_expression : factor

Line 20: term : term MULOP unary_expression

*

Line 20: simple_expression : term

Line 20: factor : CONST_INT
5

Line 20: unary_expression : factor

Line 20: term : unary_expression

Line 20: factor : CONST_INT
3

Line 20: unary_expression : factor

Line 20: term : term MULOP unary_expression

%

Line 20: simple_expression : term

Line 20: factor : CONST_INT
4

Line 20: unary_expression : factor

Line 20: term : unary_expression

Line 20: simple_expression : term

Line 20: rel_expression : simple_expression RELOP simple_expression

Line 20: factor : CONST_INT
8

Line 20: unary_expression : factor

Line 20: term : unary_expression

Line 20: simple_expression : term

Line 20: rel_expression : simple_expression

Line 20: logic_expression : rel_expression

Line 20: expression : logic_expression

Line 20: factor :  LPAREN expression RPAREN

Line 20: unary_expression : factor

Line 20: term : unary_expression

Line 20: simple_expression : simple_expression ADDOP term

Line 20: rel_expression : simple_expression

Line 20: factor : CONST_INT
2

Line 20: unary_expression : factor

Line 20: term : unary_expression

Line 20: simple_expression : term

Line 20: rel_expression : simple_expression

Line 20: logic_expression : rel_expression

Line 20: expression : variable ASSINOP logic_expression

ScopeTable # 4
0 -->  < i, int , -10000000 >
1 -->  < d, float , -10000000.000000 >
5 -->  < a, int ,{ -10000000, -10000000 }>
6 -->  < c, int , -10000000 > < j, int , -10000000 >

ScopeTable # 1
0 -->  < var, function >
1 -->  < y, int , -10000000 > < main, function >
5 -->  < a, float , -10000000.000000 >
6 -->  < x, int , -10000000 > < z, int , -10000000 > < foo, function >

Line 20: expression_statement	: expression SEMICOLON

Line 20: statement : expression_statement

Line 20: statements : statements statement

Line 21: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

Line 21: statements : statements statement

Line 22: variable : ID
d

Line 22: factor : CONST_INT
1

Line 22: unary_expression : factor

Line 22: term : unary_expression

Line 22: simple_expression : term

Line 22: rel_expression : simple_expression

Line 22: logic_expression : rel_expression

Line 22: argument_list : logic_expression

Line 22: factor : CONST_INT
2

Line 22: unary_expression : factor

Line 22: term : unary_expression

Line 22: factor : CONST_INT
3

Line 22: unary_expression : factor

Line 22: term : term MULOP unary_expression

*

Line 22: simple_expression : term

Line 22: rel_expression : simple_expression

Line 22: logic_expression : rel_expression

Line 22: argument_list : argument_list COMMA logic_expression

Line 22: argument_list : argumets

Line 22: factor : ID LPAREN argument_list RPAREN

Line 22: unary_expression : factor

Line 22: term : unary_expression

Line 22: simple_expression : term

Line 22: factor : CONST_FLOAT
3.500000

Line 22: unary_expression : factor

Line 22: term : unary_expression

Line 22: factor : CONST_INT
2

Line 22: unary_expression : factor

Line 22: term : term MULOP unary_expression

*

Line 22: simple_expression : simple_expression ADDOP term

Line 22: rel_expression : simple_expression

Line 22: logic_expression : rel_expression

Line 22: expression : variable ASSINOP logic_expression

ScopeTable # 4
0 -->  < i, int , -10000000 >
1 -->  < d, float , -10000000.000000 >
5 -->  < a, int ,{ -10000000, -10000000 }>
6 -->  < c, int , -10000000 > < j, int , -10000000 >

ScopeTable # 1
0 -->  < var, function >
1 -->  < y, int , -10000000 > < main, function >
5 -->  < a, float , -10000000.000000 >
6 -->  < x, int , -10000000 > < z, int , -10000000 > < foo, function >

Line 22: expression_statement	: expression SEMICOLON

Line 22: statement : expression_statement

Line 22: statements : statements statement

Line 23: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

Line 23: statements : statements statement

Line 24: factor : CONST_INT
0

Line 24: unary_expression : factor

Line 24: term : unary_expression

Line 24: simple_expression : term

Line 24: rel_expression : simple_expression

Line 24: logic_expression : rel_expression

Line 24: expression : logic_expression

Line 24: statement : RETURN expression SEMICOLON 

Line 24: statements : statements statement

Line 25: compound_statement : LCURL statements RCURL

ScopeTable # 4
0 -->  < i, int , -10000000 >
1 -->  < d, float , -10000000.000000 >
5 -->  < a, int ,{ -10000000, -10000000 }>
6 -->  < c, int , -10000000 > < j, int , -10000000 >

ScopeTable # 1
0 -->  < var, function >
1 -->  < y, int , -10000000 > < main, function >
5 -->  < a, float , -10000000.000000 >
6 -->  < x, int , -10000000 > < z, int , -10000000 > < foo, function >

Line 25: func_definition : type_specifier ID LPAREN RPAREN compound_statement
main

Line 25: unit : func_definition

Line 25: program : program unit

Total Lines: 26

Total Errors: 0

